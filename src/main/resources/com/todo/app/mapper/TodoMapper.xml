<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper.xml DBとjavaをつなげるSQLマッピングファイル  -->
<mapper namespace="com.todo.app.mapper.TodoMapper">
	
	<!-- 全てのtodoアイテムを取得するためのSQLマッピング  -->
	<!-- id="selectAll" javaコードからSQLを呼び出す識別子  -->
	<!-- resultType="com.todo.app.entity.Todo SQLからの取得結果をインタフェースの
	public List<Todo> selectAll();のLISTへマッピングする  -->
	<select id="selectAll" resultType="com.todo.app.entity.Todo">
		SELECT * FROM todo_items
	</select>
	
	<!-- todoアイテムのselectIncompleteを取得するためのSQLマッピング  -->
	<!-- id="selectIncomplete"を javaコードからSQLを呼び出す識別子  -->
	<!-- resultType="com.todo.app.entity.Todo SQLからの取得結果をインタフェースの
	 public List<Todo> selectIncomplete();のLISTへマッピングする  -->
	<select id="selectIncomplete"
		resultType="com.todo.app.entity.Todo">
		SELECT * FROM todo_items WHERE done_flg = 0
	</select>
	
	<!-- todoアイテムのselectCompleteを取得するためのSQLマッピング  -->
	<!-- id="selectComplete"を javaコードからSQLを呼び出す識別子  -->
	<!-- resultType="com.todo.app.entity.Todo SQLからの取得結果をインタフェースの
	 public List<Todo> selectComplete();のLISTへマッピングする  -->
	<select id="selectComplete"
		resultType="com.todo.app.entity.Todo">
		SELECT * FROM todo_items WHERE done_flg = 1
	</select>
	
	<!-- todoアイテムのaddを取得するためのSQLマッピング -->
	<!-- id="add"を javaコードからSQLを呼び出す識別子  -->
	<!-- parameterType="com.todo.app.entity.Todo SQLに渡される引数をインタフェースの
	 public void add(Todo todo)のaddへマッピングする  -->
	<!-- VALUE句の#{title}, #{time_limit}が 引数として渡されたTodoエンティティの
	 title, time_limitフィールドの値がSQLに埋め込まれる -->
	<!-- todoアイテムのupdateを取得するためのSQLマッピング -->
	<!-- id="update"を javaコードからSQLを呼び出す識別子  -->
	<!-- parameterType="com.todo.app.entity.Todo SQLに渡される引数をインタフェースの
	 public void update(Todo todo)のaddへマッピングする  -->
	<!-- set句の#{title}, #{time_limit},#{done_flg} WHERE句の{id}が
	引数として渡されたTodoエンティティのtitle, time_limit,done_flg フィールドの値
	がSQLに埋め込まれる -->
	<update id="update" parameterType="com.todo.app.entity.Todo">
		update todo_items set
		title = #{title},
		time_limit = #{time_limit}, done_flg = #{done_flg}
		WHERE id = #{id}
	</update>
	
	<!-- 完了済  done_flg = 1のtodoアイテムをtodo_itemsテーブルから削除するsqlマッピング-->
	<!-- id="delete"を javaコードからSQLを呼び出す識別子  -->
	<!-- parameterType="com.todo.app.entity.Todo": 
	このSQLに引数としてTodoエンティティが渡されるが、SQL自体は固定の条件（done_flg=1）で削除を行う -->	
	<delete id="delete" parameterType="com.todo.app.entity.Todo">
		DELETE FROM todo_items WHERE done_flg = 1
	</delete>
	
	<!-- 更新処理-->
	<update id="updateItem">
	 update todo_items
	 set
	 	title = #{title},
	 	time_limit = #{time_limit}
	 where 
	 	id = #{id}
	</update>
</mapper>
